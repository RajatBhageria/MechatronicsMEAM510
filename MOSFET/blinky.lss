
blinky.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000762  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000003  00800100  00800100  000007d6  2**0
                  ALLOC
  2 .debug_aranges 000000b0  00000000  00000000  000007d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 0000010f  00000000  00000000  00000886  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000c86  00000000  00000000  00000995  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000003c5  00000000  00000000  0000161b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000a38  00000000  00000000  000019e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000100  00000000  00000000  00002418  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000323  00000000  00000000  00002518  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000093f  00000000  00000000  0000283b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000158  00000000  00000000  0000317a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
}

// return 0 if the USB is not configured, or the configuration
// number selected by the HOST
uint8_t usb_configured(void)
{
   0:	f2 c0       	rjmp	.+484    	; 0x1e6 <__ctors_end>

void phex16(unsigned int i)
{
	phex(i >> 8);
	phex(i);
}
   2:	00 00       	nop
   4:	00 c1       	rjmp	.+512    	; 0x206 <__bad_interrupt>
   6:	00 00       	nop
   8:	fe c0       	rjmp	.+508    	; 0x206 <__bad_interrupt>
   a:	00 00       	nop
   c:	fc c0       	rjmp	.+504    	; 0x206 <__bad_interrupt>
   e:	00 00       	nop
  10:	fa c0       	rjmp	.+500    	; 0x206 <__bad_interrupt>
  12:	00 00       	nop
  14:	f8 c0       	rjmp	.+496    	; 0x206 <__bad_interrupt>
  16:	00 00       	nop
  18:	f6 c0       	rjmp	.+492    	; 0x206 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	f4 c0       	rjmp	.+488    	; 0x206 <__bad_interrupt>
  1e:	00 00       	nop
  20:	f2 c0       	rjmp	.+484    	; 0x206 <__bad_interrupt>
  22:	00 00       	nop
  24:	f0 c0       	rjmp	.+480    	; 0x206 <__bad_interrupt>
  26:	00 00       	nop
  28:	eb c1       	rjmp	.+982    	; 0x400 <__vector_10>
  2a:	00 00       	nop
  2c:	29 c2       	rjmp	.+1106   	; 0x480 <__vector_11>
  2e:	00 00       	nop
  30:	ea c0       	rjmp	.+468    	; 0x206 <__bad_interrupt>
  32:	00 00       	nop
  34:	e8 c0       	rjmp	.+464    	; 0x206 <__bad_interrupt>
  36:	00 00       	nop
  38:	e6 c0       	rjmp	.+460    	; 0x206 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	e4 c0       	rjmp	.+456    	; 0x206 <__bad_interrupt>
  3e:	00 00       	nop
  40:	e2 c0       	rjmp	.+452    	; 0x206 <__bad_interrupt>
  42:	00 00       	nop
  44:	e0 c0       	rjmp	.+448    	; 0x206 <__bad_interrupt>
  46:	00 00       	nop
  48:	de c0       	rjmp	.+444    	; 0x206 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	dc c0       	rjmp	.+440    	; 0x206 <__bad_interrupt>
  4e:	00 00       	nop
  50:	da c0       	rjmp	.+436    	; 0x206 <__bad_interrupt>
  52:	00 00       	nop
  54:	d8 c0       	rjmp	.+432    	; 0x206 <__bad_interrupt>
  56:	00 00       	nop
  58:	d6 c0       	rjmp	.+428    	; 0x206 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	d4 c0       	rjmp	.+424    	; 0x206 <__bad_interrupt>
  5e:	00 00       	nop
  60:	d2 c0       	rjmp	.+420    	; 0x206 <__bad_interrupt>
  62:	00 00       	nop
  64:	d0 c0       	rjmp	.+416    	; 0x206 <__bad_interrupt>
  66:	00 00       	nop
  68:	ce c0       	rjmp	.+412    	; 0x206 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	cc c0       	rjmp	.+408    	; 0x206 <__bad_interrupt>
  6e:	00 00       	nop
  70:	ca c0       	rjmp	.+404    	; 0x206 <__bad_interrupt>
  72:	00 00       	nop
  74:	c8 c0       	rjmp	.+400    	; 0x206 <__bad_interrupt>
  76:	00 00       	nop
  78:	c6 c0       	rjmp	.+396    	; 0x206 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	c4 c0       	rjmp	.+392    	; 0x206 <__bad_interrupt>
  7e:	00 00       	nop
  80:	c2 c0       	rjmp	.+388    	; 0x206 <__bad_interrupt>
  82:	00 00       	nop
  84:	c0 c0       	rjmp	.+384    	; 0x206 <__bad_interrupt>
  86:	00 00       	nop
  88:	be c0       	rjmp	.+380    	; 0x206 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	bc c0       	rjmp	.+376    	; 0x206 <__bad_interrupt>
  8e:	00 00       	nop
  90:	ba c0       	rjmp	.+372    	; 0x206 <__bad_interrupt>
  92:	00 00       	nop
  94:	b8 c0       	rjmp	.+368    	; 0x206 <__bad_interrupt>
  96:	00 00       	nop
  98:	b6 c0       	rjmp	.+364    	; 0x206 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	b4 c0       	rjmp	.+360    	; 0x206 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	b2 c0       	rjmp	.+356    	; 0x206 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	b0 c0       	rjmp	.+352    	; 0x206 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	ae c0       	rjmp	.+348    	; 0x206 <__bad_interrupt>
  aa:	00 00       	nop

000000ac <morse_code_table>:
  ac:	42 84 a4 83 01 24 c3 04 02 74 a3 44 c2 82 e3 64     B....$...t.D...d
  bc:	d4 43 03 81 23 14 63 94 b4 c4                       .C..#.c...

000000c6 <__c.1438>:
  c6:	0a 00                                               ..

000000c8 <__c.1417>:
  c8:	0a 00                                               ..

000000ca <__c.1412>:
  ca:	20 64 69 74 00                                       dit.

000000cf <__c.1410>:
  cf:	20 64 61 68 00                                       dah.

000000d4 <__c.1405>:
  d4:	43 68 61 72 20 00                                   Char .

000000da <__c.1403>:
  da:	0a 00                                               ..

000000dc <__c.1401>:
  dc:	4f 70 70 73 2c 20 75 6e 73 75 70 70 6f 72 74 65     Opps, unsupporte
  ec:	64 20 63 68 61 72 61 63 74 65 72 3a 20 00           d character: .

000000fa <__c.1399>:
  fa:	53 70 61 63 65 0a 00                                Space..

00000101 <__c.1383>:
 101:	44 4f 45 53 20 41 4e 59 42 4f 44 59 20 53 54 49     DOES ANYBODY STI
 111:	4c 4c 20 4b 4e 4f 57 20 4d 4f 52 53 45 20 43 4f     LL KNOW MORSE CO
 121:	44 45 3f 00                                         DE?.

00000125 <__c.1378>:
 125:	53 4f 53 00                                         SOS.

00000129 <descriptor_list>:
 129:	00 01 00 00 60 01 12 00 02 00 00 72 01 22 00 22     ....`......r."."
 139:	00 00 94 01 15 00 21 00 00 84 01 09 00 03 00 00     ......!.........
 149:	a9 01 04 01 03 09 04 ad 01 14 02 03 09 04 c3 01     ................
 159:	20                                                   

0000015a <endpoint_config_table>:
 15a:	00 00 01 c1 26 00                                   ....&.

00000160 <device_descriptor>:
 160:	12 01 00 02 00 00 00 20 c0 16 79 04 00 01 01 02     ....... ..y.....
 170:	00 01                                               ..

00000172 <config1_descriptor>:
 172:	09 02 22 00 01 01 00 c0 32 09 04 00 00 01 03 00     ..".....2.......
 182:	00 00 09 21 11 01 00 01 22 15 00 07 05 83 03 20     ...!...."...... 
 192:	00 01                                               ..

00000194 <hid_report_descriptor>:
 194:	06 31 ff 09 74 a1 53 75 08 15 00 26 ff 00 95 20     .1..t.Su...&... 
 1a4:	09 75 81 02 c0                                      .u...

000001a9 <string0>:
 1a9:	04 03 09 04                                         ....

000001ad <string1>:
 1ad:	14 03 59 00 6f 00 75 00 72 00 20 00 4e 00 61 00     ..Y.o.u.r. .N.a.
 1bd:	6d 00 65 00 00 00                                   m.e...

000001c3 <string2>:
 1c3:	20 03 59 00 6f 00 75 00 72 00 20 00 55 00 53 00      .Y.o.u.r. .U.S.
 1d3:	42 00 20 00 44 00 65 00 76 00 69 00 63 00 65 00     B. .D.e.v.i.c.e.
 1e3:	00 00 00                                            ...

000001e6 <__ctors_end>:
 1e6:	11 24       	eor	r1, r1
 1e8:	1f be       	out	0x3f, r1	; 63
 1ea:	cf ef       	ldi	r28, 0xFF	; 255
 1ec:	da e0       	ldi	r29, 0x0A	; 10
 1ee:	de bf       	out	0x3e, r29	; 62
 1f0:	cd bf       	out	0x3d, r28	; 61

000001f2 <__do_clear_bss>:
 1f2:	11 e0       	ldi	r17, 0x01	; 1
 1f4:	a0 e0       	ldi	r26, 0x00	; 0
 1f6:	b1 e0       	ldi	r27, 0x01	; 1
 1f8:	01 c0       	rjmp	.+2      	; 0x1fc <.do_clear_bss_start>

000001fa <.do_clear_bss_loop>:
 1fa:	1d 92       	st	X+, r1

000001fc <.do_clear_bss_start>:
 1fc:	a3 30       	cpi	r26, 0x03	; 3
 1fe:	b1 07       	cpc	r27, r17
 200:	e1 f7       	brne	.-8      	; 0x1fa <.do_clear_bss_loop>
 202:	79 d0       	rcall	.+242    	; 0x2f6 <main>
 204:	ac c2       	rjmp	.+1368   	; 0x75e <_exit>

00000206 <__bad_interrupt>:
 206:	fc ce       	rjmp	.-520    	; 0x0 <__vectors>

00000208 <morse_character>:
	}
}

// blink a single character in Morse code
void morse_character(char c)
{
 208:	0f 93       	push	r16
 20a:	1f 93       	push	r17
 20c:	cf 93       	push	r28
 20e:	df 93       	push	r29
 210:	18 2f       	mov	r17, r24
	unsigned char code, count;

	if (c == ' ') {
 212:	80 32       	cpi	r24, 0x20	; 32
 214:	69 f4       	brne	.+26     	; 0x230 <morse_character+0x28>
		print("Space\n");
 216:	8a ef       	ldi	r24, 0xFA	; 250
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	8d d2       	rcall	.+1306   	; 0x736 <print_P>
 21c:	80 ee       	ldi	r24, 0xE0	; 224
 21e:	95 e1       	ldi	r25, 0x15	; 21
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 220:	20 e9       	ldi	r18, 0x90	; 144
 222:	31 e0       	ldi	r19, 0x01	; 1
 224:	f9 01       	movw	r30, r18
 226:	31 97       	sbiw	r30, 0x01	; 1
 228:	f1 f7       	brne	.-4      	; 0x226 <morse_character+0x1e>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 22a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 22c:	d9 f7       	brne	.-10     	; 0x224 <morse_character+0x1c>
 22e:	4e c0       	rjmp	.+156    	; 0x2cc <morse_character+0xc4>
		_delay_ms(DIT * 7);
		return;
	}
	if (c < 'A' || c > 'Z') {
 230:	81 54       	subi	r24, 0x41	; 65
 232:	8a 31       	cpi	r24, 0x1A	; 26
 234:	48 f0       	brcs	.+18     	; 0x248 <morse_character+0x40>
		print("Opps, unsupported character: ");
 236:	8c ed       	ldi	r24, 0xDC	; 220
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	7d d2       	rcall	.+1274   	; 0x736 <print_P>
		pchar(c);
 23c:	81 2f       	mov	r24, r17
 23e:	9a d0       	rcall	.+308    	; 0x374 <usb_debug_putchar>
		print("\n");
 240:	8a ed       	ldi	r24, 0xDA	; 218
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	78 d2       	rcall	.+1264   	; 0x736 <print_P>
 246:	42 c0       	rjmp	.+132    	; 0x2cc <morse_character+0xc4>
		return;	
	}
	print("Char ");
 248:	84 ed       	ldi	r24, 0xD4	; 212
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	74 d2       	rcall	.+1256   	; 0x736 <print_P>
	pchar(c);
 24e:	81 2f       	mov	r24, r17
 250:	91 d0       	rcall	.+290    	; 0x374 <usb_debug_putchar>
	pchar(':');
 252:	8a e3       	ldi	r24, 0x3A	; 58
 254:	8f d0       	rcall	.+286    	; 0x374 <usb_debug_putchar>
	code = pgm_read_byte(morse_code_table + (c - 'A'));
 256:	e1 2f       	mov	r30, r17
 258:	f0 e0       	ldi	r31, 0x00	; 0
 25a:	e5 59       	subi	r30, 0x95	; 149
 25c:	ff 4f       	sbci	r31, 0xFF	; 255
 25e:	e4 91       	lpm	r30, Z+
	for (count = code & 0x07; count > 0; count--) {
 260:	0e 2f       	mov	r16, r30
 262:	07 70       	andi	r16, 0x07	; 7
 264:	1e 2f       	mov	r17, r30
 266:	c0 e9       	ldi	r28, 0x90	; 144
 268:	d1 e0       	ldi	r29, 0x01	; 1
 26a:	22 c0       	rjmp	.+68     	; 0x2b0 <morse_character+0xa8>
		LED_ON;
 26c:	5e 9a       	sbi	0x0b, 6	; 11
		if (code & 0x80) {
 26e:	17 ff       	sbrs	r17, 7
 270:	0b c0       	rjmp	.+22     	; 0x288 <morse_character+0x80>
			print(" dah");
 272:	8f ec       	ldi	r24, 0xCF	; 207
 274:	90 e0       	ldi	r25, 0x00	; 0
 276:	5f d2       	rcall	.+1214   	; 0x736 <print_P>
 278:	80 e6       	ldi	r24, 0x60	; 96
 27a:	99 e0       	ldi	r25, 0x09	; 9
 27c:	fe 01       	movw	r30, r28
 27e:	31 97       	sbiw	r30, 0x01	; 1
 280:	f1 f7       	brne	.-4      	; 0x27e <morse_character+0x76>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 282:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 284:	d9 f7       	brne	.-10     	; 0x27c <morse_character+0x74>
 286:	0a c0       	rjmp	.+20     	; 0x29c <morse_character+0x94>
			_delay_ms(DIT * 3);
		} else {
			print(" dit");
 288:	8a ec       	ldi	r24, 0xCA	; 202
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	54 d2       	rcall	.+1192   	; 0x736 <print_P>
 28e:	80 e2       	ldi	r24, 0x20	; 32
 290:	93 e0       	ldi	r25, 0x03	; 3
 292:	fe 01       	movw	r30, r28
 294:	31 97       	sbiw	r30, 0x01	; 1
 296:	f1 f7       	brne	.-4      	; 0x294 <morse_character+0x8c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 298:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 29a:	d9 f7       	brne	.-10     	; 0x292 <morse_character+0x8a>
			_delay_ms(DIT);
		}
		LED_OFF;
 29c:	5e 98       	cbi	0x0b, 6	; 11
 29e:	80 e2       	ldi	r24, 0x20	; 32
 2a0:	93 e0       	ldi	r25, 0x03	; 3
 2a2:	fe 01       	movw	r30, r28
 2a4:	31 97       	sbiw	r30, 0x01	; 1
 2a6:	f1 f7       	brne	.-4      	; 0x2a4 <morse_character+0x9c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 2a8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 2aa:	d9 f7       	brne	.-10     	; 0x2a2 <morse_character+0x9a>
		_delay_ms(DIT);
		code = code << 1;
 2ac:	11 0f       	add	r17, r17
	}
	print("Char ");
	pchar(c);
	pchar(':');
	code = pgm_read_byte(morse_code_table + (c - 'A'));
	for (count = code & 0x07; count > 0; count--) {
 2ae:	01 50       	subi	r16, 0x01	; 1
 2b0:	00 23       	and	r16, r16
 2b2:	e1 f6       	brne	.-72     	; 0x26c <morse_character+0x64>
		}
		LED_OFF;
		_delay_ms(DIT);
		code = code << 1;
	}
	print("\n");
 2b4:	88 ec       	ldi	r24, 0xC8	; 200
 2b6:	90 e0       	ldi	r25, 0x00	; 0
 2b8:	3e d2       	rcall	.+1148   	; 0x736 <print_P>
 2ba:	80 e4       	ldi	r24, 0x40	; 64
 2bc:	96 e0       	ldi	r25, 0x06	; 6
 2be:	20 e9       	ldi	r18, 0x90	; 144
 2c0:	31 e0       	ldi	r19, 0x01	; 1
 2c2:	f9 01       	movw	r30, r18
 2c4:	31 97       	sbiw	r30, 0x01	; 1
 2c6:	f1 f7       	brne	.-4      	; 0x2c4 <morse_character+0xbc>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 2c8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 2ca:	d9 f7       	brne	.-10     	; 0x2c2 <morse_character+0xba>
	_delay_ms(DIT * 2);
}
 2cc:	df 91       	pop	r29
 2ce:	cf 91       	pop	r28
 2d0:	1f 91       	pop	r17
 2d2:	0f 91       	pop	r16
 2d4:	08 95       	ret

000002d6 <morse_P>:

// blink an entire message in Morse code
// the string must be in flash memory (using PSTR macro)
void morse_P(const char *s)
{
 2d6:	cf 93       	push	r28
 2d8:	df 93       	push	r29
 2da:	ec 01       	movw	r28, r24
 2dc:	fe 01       	movw	r30, r28
	char c;
	
	while (1) {
		c = pgm_read_byte(s++);
 2de:	21 96       	adiw	r28, 0x01	; 1
 2e0:	84 91       	lpm	r24, Z+
		if (!c) break;
 2e2:	88 23       	and	r24, r24
 2e4:	11 f0       	breq	.+4      	; 0x2ea <morse_P+0x14>
		morse_character(c);
 2e6:	90 df       	rcall	.-224    	; 0x208 <morse_character>
 2e8:	f9 cf       	rjmp	.-14     	; 0x2dc <morse_P+0x6>
	}
	print("\n");
 2ea:	86 ec       	ldi	r24, 0xC6	; 198
 2ec:	90 e0       	ldi	r25, 0x00	; 0
 2ee:	23 d2       	rcall	.+1094   	; 0x736 <print_P>
}
 2f0:	df 91       	pop	r29
 2f2:	cf 91       	pop	r28
 2f4:	08 95       	ret

000002f6 <main>:
void morse_P(const char *s);
const unsigned char morse_code_table[];


int main(void)
{
 2f6:	1f 93       	push	r17
 2f8:	cf 93       	push	r28
 2fa:	df 93       	push	r29
	unsigned char i;

	// set for 16 MHz clock, and make sure the LED is off
	CPU_PRESCALE(0);
 2fc:	80 e8       	ldi	r24, 0x80	; 128
 2fe:	80 93 61 00 	sts	0x0061, r24
 302:	10 92 61 00 	sts	0x0061, r1
	LED_CONFIG;
 306:	56 9a       	sbi	0x0a, 6	; 10
	LED_OFF;
 308:	5e 98       	cbi	0x0b, 6	; 11

	// initialize the USB, but don't want for the host to
	// configure.  The first several messages sent will be
	// lost because the PC hasn't configured the USB yet,
	// but we care more about blinking than debug messages!
	usb_init();
 30a:	1d d0       	rcall	.+58     	; 0x346 <usb_init>
 30c:	10 e0       	ldi	r17, 0x00	; 0
 30e:	c0 e9       	ldi	r28, 0x90	; 144
 310:	d1 e0       	ldi	r29, 0x01	; 1
 312:	0b c0       	rjmp	.+22     	; 0x32a <main+0x34>

	// blink morse code messages!
	while (1) {
		for (i=0; i<6; i++) {
			morse_P(PSTR("SOS"));
 314:	85 e2       	ldi	r24, 0x25	; 37
 316:	91 e0       	ldi	r25, 0x01	; 1
 318:	de df       	rcall	.-68     	; 0x2d6 <morse_P>
 31a:	88 e9       	ldi	r24, 0x98	; 152
 31c:	9a e3       	ldi	r25, 0x3A	; 58
 31e:	fe 01       	movw	r30, r28
 320:	31 97       	sbiw	r30, 0x01	; 1
 322:	f1 f7       	brne	.-4      	; 0x320 <main+0x2a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 324:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 326:	d9 f7       	brne	.-10     	; 0x31e <main+0x28>
	// but we care more about blinking than debug messages!
	usb_init();

	// blink morse code messages!
	while (1) {
		for (i=0; i<6; i++) {
 328:	1f 5f       	subi	r17, 0xFF	; 255
 32a:	16 30       	cpi	r17, 0x06	; 6
 32c:	98 f3       	brcs	.-26     	; 0x314 <main+0x1e>
			morse_P(PSTR("SOS"));
			_delay_ms(1500);
		}
		morse_P(PSTR("DOES ANYBODY STILL KNOW MORSE CODE?"));
 32e:	81 e0       	ldi	r24, 0x01	; 1
 330:	91 e0       	ldi	r25, 0x01	; 1
 332:	d1 df       	rcall	.-94     	; 0x2d6 <morse_P>
 334:	80 e4       	ldi	r24, 0x40	; 64
 336:	9c e9       	ldi	r25, 0x9C	; 156
 338:	fe 01       	movw	r30, r28
 33a:	31 97       	sbiw	r30, 0x01	; 1
 33c:	f1 f7       	brne	.-4      	; 0x33a <main+0x44>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 33e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 340:	d9 f7       	brne	.-10     	; 0x338 <main+0x42>
 342:	10 e0       	ldi	r17, 0x00	; 0
 344:	e7 cf       	rjmp	.-50     	; 0x314 <main+0x1e>

00000346 <usb_init>:


// initialize USB
void usb_init(void)
{
	HW_CONFIG();
 346:	81 e0       	ldi	r24, 0x01	; 1
 348:	80 93 d7 00 	sts	0x00D7, r24
	USB_FREEZE();				// enable USB
 34c:	80 ea       	ldi	r24, 0xA0	; 160
 34e:	80 93 d8 00 	sts	0x00D8, r24
	PLL_CONFIG();				// config PLL
 352:	82 e1       	ldi	r24, 0x12	; 18
 354:	89 bd       	out	0x29, r24	; 41
        while (!(PLLCSR & (1<<PLOCK))) ;	// wait for PLL lock
 356:	09 b4       	in	r0, 0x29	; 41
 358:	00 fe       	sbrs	r0, 0
 35a:	fd cf       	rjmp	.-6      	; 0x356 <usb_init+0x10>
        USB_CONFIG();				// start USB clock
 35c:	80 e9       	ldi	r24, 0x90	; 144
 35e:	80 93 d8 00 	sts	0x00D8, r24
        UDCON = 0;				// enable attach resistor
 362:	10 92 e0 00 	sts	0x00E0, r1
	usb_configuration = 0;
 366:	10 92 00 01 	sts	0x0100, r1
        UDIEN = (1<<EORSTE)|(1<<SOFE);
 36a:	8c e0       	ldi	r24, 0x0C	; 12
 36c:	80 93 e2 00 	sts	0x00E2, r24
	sei();
 370:	78 94       	sei
}
 372:	08 95       	ret

00000374 <usb_debug_putchar>:
	return usb_configuration;
}

// transmit a character.  0 returned on success, -1 on error
int8_t usb_debug_putchar(uint8_t c)
{
 374:	48 2f       	mov	r20, r24
	static uint8_t previous_timeout=0;
	uint8_t timeout, intr_state;

	// if we're not online (enumerated and configured), error
	if (!usb_configuration) return -1;
 376:	80 91 00 01 	lds	r24, 0x0100
 37a:	88 23       	and	r24, r24
 37c:	09 f4       	brne	.+2      	; 0x380 <usb_debug_putchar+0xc>
 37e:	3e c0       	rjmp	.+124    	; 0x3fc <usb_debug_putchar+0x88>
	// interrupts are disabled so these functions can be
	// used from the main program or interrupt context,
	// even both in the same program!
	intr_state = SREG;
 380:	2f b7       	in	r18, 0x3f	; 63
	cli();
 382:	f8 94       	cli
	UENUM = DEBUG_TX_ENDPOINT;
 384:	83 e0       	ldi	r24, 0x03	; 3
 386:	80 93 e9 00 	sts	0x00E9, r24
	// if we gave up due to timeout before, don't wait again
	if (previous_timeout) {
 38a:	80 91 02 01 	lds	r24, 0x0102
 38e:	88 23       	and	r24, r24
 390:	41 f0       	breq	.+16     	; 0x3a2 <usb_debug_putchar+0x2e>
		if (!(UEINTX & (1<<RWAL))) {
 392:	80 91 e8 00 	lds	r24, 0x00E8
 396:	85 fd       	sbrc	r24, 5
 398:	02 c0       	rjmp	.+4      	; 0x39e <usb_debug_putchar+0x2a>
			SREG = intr_state;
 39a:	2f bf       	out	0x3f, r18	; 63
 39c:	12 c0       	rjmp	.+36     	; 0x3c2 <usb_debug_putchar+0x4e>
			return -1;
		}
		previous_timeout = 0;
 39e:	10 92 02 01 	sts	0x0102, r1
	}
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + 4;
 3a2:	90 91 e4 00 	lds	r25, 0x00E4
 3a6:	9c 5f       	subi	r25, 0xFC	; 252
		// has the USB gone offline?
		if (!usb_configuration) return -1;
		// get ready to try checking again
		intr_state = SREG;
		cli();
		UENUM = DEBUG_TX_ENDPOINT;
 3a8:	33 e0       	ldi	r19, 0x03	; 3
	}
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + 4;
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
 3aa:	80 91 e8 00 	lds	r24, 0x00E8
 3ae:	85 fd       	sbrc	r24, 5
 3b0:	13 c0       	rjmp	.+38     	; 0x3d8 <usb_debug_putchar+0x64>
		SREG = intr_state;
 3b2:	2f bf       	out	0x3f, r18	; 63
		// have we waited too long?
		if (UDFNUML == timeout) {
 3b4:	80 91 e4 00 	lds	r24, 0x00E4
 3b8:	89 17       	cp	r24, r25
 3ba:	29 f4       	brne	.+10     	; 0x3c6 <usb_debug_putchar+0x52>
			previous_timeout = 1;
 3bc:	81 e0       	ldi	r24, 0x01	; 1
 3be:	80 93 02 01 	sts	0x0102, r24
 3c2:	8f ef       	ldi	r24, 0xFF	; 255
 3c4:	08 95       	ret
			return -1;
		}
		// has the USB gone offline?
		if (!usb_configuration) return -1;
 3c6:	80 91 00 01 	lds	r24, 0x0100
 3ca:	88 23       	and	r24, r24
 3cc:	b9 f0       	breq	.+46     	; 0x3fc <usb_debug_putchar+0x88>
		// get ready to try checking again
		intr_state = SREG;
 3ce:	2f b7       	in	r18, 0x3f	; 63
		cli();
 3d0:	f8 94       	cli
		UENUM = DEBUG_TX_ENDPOINT;
 3d2:	30 93 e9 00 	sts	0x00E9, r19
 3d6:	e9 cf       	rjmp	.-46     	; 0x3aa <usb_debug_putchar+0x36>
	}
	// actually write the byte into the FIFO
	UEDATX = c;
 3d8:	40 93 f1 00 	sts	0x00F1, r20
	// if this completed a packet, transmit it now!
	if (!(UEINTX & (1<<RWAL))) {
 3dc:	80 91 e8 00 	lds	r24, 0x00E8
 3e0:	85 fd       	sbrc	r24, 5
 3e2:	06 c0       	rjmp	.+12     	; 0x3f0 <usb_debug_putchar+0x7c>
		UEINTX = 0x3A;
 3e4:	8a e3       	ldi	r24, 0x3A	; 58
 3e6:	80 93 e8 00 	sts	0x00E8, r24
		debug_flush_timer = 0;
 3ea:	10 92 01 01 	sts	0x0101, r1
 3ee:	03 c0       	rjmp	.+6      	; 0x3f6 <usb_debug_putchar+0x82>
	} else {
		debug_flush_timer = 2;
 3f0:	82 e0       	ldi	r24, 0x02	; 2
 3f2:	80 93 01 01 	sts	0x0101, r24
	}
	SREG = intr_state;
 3f6:	2f bf       	out	0x3f, r18	; 63
 3f8:	80 e0       	ldi	r24, 0x00	; 0
 3fa:	08 95       	ret
	return 0;
 3fc:	8f ef       	ldi	r24, 0xFF	; 255
}
 3fe:	08 95       	ret

00000400 <__vector_10>:

// USB Device Interrupt - handle all device-level events
// the transmit buffer flushing is triggered by the start of frame
//
ISR(USB_GEN_vect)
{
 400:	1f 92       	push	r1
 402:	0f 92       	push	r0
 404:	0f b6       	in	r0, 0x3f	; 63
 406:	0f 92       	push	r0
 408:	11 24       	eor	r1, r1
 40a:	8f 93       	push	r24
 40c:	9f 93       	push	r25
	uint8_t intbits, t;

        intbits = UDINT;
 40e:	80 91 e1 00 	lds	r24, 0x00E1
        UDINT = 0;
 412:	10 92 e1 00 	sts	0x00E1, r1
        if (intbits & (1<<EORSTI)) {
 416:	98 2f       	mov	r25, r24
 418:	83 ff       	sbrs	r24, 3
 41a:	0f c0       	rjmp	.+30     	; 0x43a <__vector_10+0x3a>
		UENUM = 0;
 41c:	10 92 e9 00 	sts	0x00E9, r1
		UECONX = 1;
 420:	81 e0       	ldi	r24, 0x01	; 1
 422:	80 93 eb 00 	sts	0x00EB, r24
		UECFG0X = EP_TYPE_CONTROL;
 426:	10 92 ec 00 	sts	0x00EC, r1
		UECFG1X = EP_SIZE(ENDPOINT0_SIZE) | EP_SINGLE_BUFFER;
 42a:	82 e2       	ldi	r24, 0x22	; 34
 42c:	80 93 ed 00 	sts	0x00ED, r24
		UEIENX = (1<<RXSTPE);
 430:	88 e0       	ldi	r24, 0x08	; 8
 432:	80 93 f0 00 	sts	0x00F0, r24
		usb_configuration = 0;
 436:	10 92 00 01 	sts	0x0100, r1
        }
	if (intbits & (1<<SOFI)) {
 43a:	92 ff       	sbrs	r25, 2
 43c:	1a c0       	rjmp	.+52     	; 0x472 <__vector_10+0x72>
		if (usb_configuration) {
 43e:	80 91 00 01 	lds	r24, 0x0100
 442:	88 23       	and	r24, r24
 444:	b1 f0       	breq	.+44     	; 0x472 <__vector_10+0x72>
			t = debug_flush_timer;
 446:	80 91 01 01 	lds	r24, 0x0101
			if (t) {
 44a:	88 23       	and	r24, r24
 44c:	91 f0       	breq	.+36     	; 0x472 <__vector_10+0x72>
				debug_flush_timer = -- t;
 44e:	81 50       	subi	r24, 0x01	; 1
 450:	80 93 01 01 	sts	0x0101, r24
				if (!t) {
 454:	88 23       	and	r24, r24
 456:	69 f4       	brne	.+26     	; 0x472 <__vector_10+0x72>
					UENUM = DEBUG_TX_ENDPOINT;
 458:	83 e0       	ldi	r24, 0x03	; 3
 45a:	80 93 e9 00 	sts	0x00E9, r24
 45e:	02 c0       	rjmp	.+4      	; 0x464 <__vector_10+0x64>
					while ((UEINTX & (1<<RWAL))) {
						UEDATX = 0;
 460:	10 92 f1 00 	sts	0x00F1, r1
			t = debug_flush_timer;
			if (t) {
				debug_flush_timer = -- t;
				if (!t) {
					UENUM = DEBUG_TX_ENDPOINT;
					while ((UEINTX & (1<<RWAL))) {
 464:	80 91 e8 00 	lds	r24, 0x00E8
 468:	85 fd       	sbrc	r24, 5
 46a:	fa cf       	rjmp	.-12     	; 0x460 <__vector_10+0x60>
						UEDATX = 0;
					}
					UEINTX = 0x3A;
 46c:	8a e3       	ldi	r24, 0x3A	; 58
 46e:	80 93 e8 00 	sts	0x00E8, r24
				}
			}
		}
	}
}
 472:	9f 91       	pop	r25
 474:	8f 91       	pop	r24
 476:	0f 90       	pop	r0
 478:	0f be       	out	0x3f, r0	; 63
 47a:	0f 90       	pop	r0
 47c:	1f 90       	pop	r1
 47e:	18 95       	reti

00000480 <__vector_11>:
// USB Endpoint Interrupt - endpoint 0 is handled here.  The
// other endpoints are manipulated by the user-callable
// functions, and the start-of-frame interrupt.
//
ISR(USB_COM_vect)
{
 480:	1f 92       	push	r1
 482:	0f 92       	push	r0
 484:	0f b6       	in	r0, 0x3f	; 63
 486:	0f 92       	push	r0
 488:	11 24       	eor	r1, r1
 48a:	2f 93       	push	r18
 48c:	3f 93       	push	r19
 48e:	4f 93       	push	r20
 490:	5f 93       	push	r21
 492:	6f 93       	push	r22
 494:	7f 93       	push	r23
 496:	8f 93       	push	r24
 498:	9f 93       	push	r25
 49a:	af 93       	push	r26
 49c:	bf 93       	push	r27
 49e:	cf 93       	push	r28
 4a0:	df 93       	push	r29
 4a2:	ef 93       	push	r30
 4a4:	ff 93       	push	r31
	uint16_t wLength;
	uint16_t desc_val;
	const uint8_t *desc_addr;
	uint8_t	desc_length;

        UENUM = 0;
 4a6:	10 92 e9 00 	sts	0x00E9, r1
        intbits = UEINTX;
 4aa:	80 91 e8 00 	lds	r24, 0x00E8
        if (intbits & (1<<RXSTPI)) {
 4ae:	83 ff       	sbrs	r24, 3
 4b0:	2c c1       	rjmp	.+600    	; 0x70a <__vector_11+0x28a>
                bmRequestType = UEDATX;
 4b2:	40 91 f1 00 	lds	r20, 0x00F1
                bRequest = UEDATX;
 4b6:	30 91 f1 00 	lds	r19, 0x00F1
                wValue = UEDATX;
 4ba:	80 91 f1 00 	lds	r24, 0x00F1
 4be:	a8 2f       	mov	r26, r24
 4c0:	b0 e0       	ldi	r27, 0x00	; 0
                wValue |= (UEDATX << 8);
 4c2:	20 91 f1 00 	lds	r18, 0x00F1
 4c6:	92 2f       	mov	r25, r18
 4c8:	80 e0       	ldi	r24, 0x00	; 0
 4ca:	a8 2b       	or	r26, r24
 4cc:	b9 2b       	or	r27, r25
                wIndex = UEDATX;
 4ce:	80 91 f1 00 	lds	r24, 0x00F1
 4d2:	68 2f       	mov	r22, r24
 4d4:	70 e0       	ldi	r23, 0x00	; 0
                wIndex |= (UEDATX << 8);
 4d6:	20 91 f1 00 	lds	r18, 0x00F1
 4da:	92 2f       	mov	r25, r18
 4dc:	80 e0       	ldi	r24, 0x00	; 0
 4de:	68 2b       	or	r22, r24
 4e0:	79 2b       	or	r23, r25
                wLength = UEDATX;
 4e2:	80 91 f1 00 	lds	r24, 0x00F1
 4e6:	c8 2f       	mov	r28, r24
 4e8:	d0 e0       	ldi	r29, 0x00	; 0
                wLength |= (UEDATX << 8);
 4ea:	20 91 f1 00 	lds	r18, 0x00F1
 4ee:	92 2f       	mov	r25, r18
 4f0:	80 e0       	ldi	r24, 0x00	; 0
 4f2:	c8 2b       	or	r28, r24
 4f4:	d9 2b       	or	r29, r25
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
 4f6:	82 ef       	ldi	r24, 0xF2	; 242
 4f8:	80 93 e8 00 	sts	0x00E8, r24
                if (bRequest == GET_DESCRIPTOR) {
 4fc:	36 30       	cpi	r19, 0x06	; 6
 4fe:	09 f0       	breq	.+2      	; 0x502 <__vector_11+0x82>
 500:	56 c0       	rjmp	.+172    	; 0x5ae <__vector_11+0x12e>
 502:	20 e3       	ldi	r18, 0x30	; 48
 504:	31 e0       	ldi	r19, 0x01	; 1
 506:	a9 01       	movw	r20, r18
 508:	45 50       	subi	r20, 0x05	; 5
 50a:	50 40       	sbci	r21, 0x00	; 0
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
					UECONX = (1<<STALLRQ)|(1<<EPEN);  //stall
					return;
 50c:	f9 01       	movw	r30, r18
 50e:	37 97       	sbiw	r30, 0x07	; 7
				}
				desc_val = pgm_read_word(list);
 510:	85 91       	lpm	r24, Z+
 512:	94 91       	lpm	r25, Z+
				if (desc_val != wValue) {
 514:	8a 17       	cp	r24, r26
 516:	9b 07       	cpc	r25, r27
 518:	e1 f4       	brne	.+56     	; 0x552 <__vector_11+0xd2>
					list += sizeof(struct descriptor_list_struct);
					continue;
				}
				list += 2;
				desc_val = pgm_read_word(list);
 51a:	fa 01       	movw	r30, r20
 51c:	85 91       	lpm	r24, Z+
 51e:	94 91       	lpm	r25, Z+
				if (desc_val != wIndex) {
 520:	86 17       	cp	r24, r22
 522:	97 07       	cpc	r25, r23
 524:	b1 f4       	brne	.+44     	; 0x552 <__vector_11+0xd2>
					list += sizeof(struct descriptor_list_struct)-2;
					continue;
				}
				list += 2;
 526:	9a 01       	movw	r18, r20
 528:	2e 5f       	subi	r18, 0xFE	; 254
 52a:	3f 4f       	sbci	r19, 0xFF	; 255
				desc_addr = (const uint8_t *)pgm_read_word(list);
 52c:	f9 01       	movw	r30, r18
 52e:	65 91       	lpm	r22, Z+
 530:	74 91       	lpm	r23, Z+
				list += 2;
				desc_length = pgm_read_byte(list);
 532:	2e 5f       	subi	r18, 0xFE	; 254
 534:	3f 4f       	sbci	r19, 0xFF	; 255
 536:	f9 01       	movw	r30, r18
 538:	24 91       	lpm	r18, Z+
				break;
			}
			len = (wLength < 256) ? wLength : 255;
 53a:	ce 01       	movw	r24, r28
 53c:	cf 3f       	cpi	r28, 0xFF	; 255
 53e:	d1 05       	cpc	r29, r1
 540:	19 f0       	breq	.+6      	; 0x548 <__vector_11+0xc8>
 542:	10 f0       	brcs	.+4      	; 0x548 <__vector_11+0xc8>
 544:	8f ef       	ldi	r24, 0xFF	; 255
 546:	90 e0       	ldi	r25, 0x00	; 0
 548:	42 2f       	mov	r20, r18
 54a:	82 17       	cp	r24, r18
 54c:	58 f4       	brcc	.+22     	; 0x564 <__vector_11+0xe4>
 54e:	48 2f       	mov	r20, r24
 550:	09 c0       	rjmp	.+18     	; 0x564 <__vector_11+0xe4>
 552:	29 5f       	subi	r18, 0xF9	; 249
 554:	3f 4f       	sbci	r19, 0xFF	; 255
 556:	49 5f       	subi	r20, 0xF9	; 249
 558:	5f 4f       	sbci	r21, 0xFF	; 255
                wLength |= (UEDATX << 8);
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
                if (bRequest == GET_DESCRIPTOR) {
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
 55a:	f1 e0       	ldi	r31, 0x01	; 1
 55c:	21 36       	cpi	r18, 0x61	; 97
 55e:	3f 07       	cpc	r19, r31
 560:	a9 f6       	brne	.-86     	; 0x50c <__vector_11+0x8c>
 562:	d3 c0       	rjmp	.+422    	; 0x70a <__vector_11+0x28a>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 564:	5e ef       	ldi	r21, 0xFE	; 254
			len = (wLength < 256) ? wLength : 255;
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
 566:	80 91 e8 00 	lds	r24, 0x00E8
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
 56a:	28 2f       	mov	r18, r24
 56c:	30 e0       	ldi	r19, 0x00	; 0
 56e:	c9 01       	movw	r24, r18
 570:	85 70       	andi	r24, 0x05	; 5
 572:	90 70       	andi	r25, 0x00	; 0
 574:	89 2b       	or	r24, r25
 576:	b9 f3       	breq	.-18     	; 0x566 <__vector_11+0xe6>
				if (i & (1<<RXOUTI)) return;	// abort
 578:	22 fd       	sbrc	r18, 2
 57a:	ca c0       	rjmp	.+404    	; 0x710 <__vector_11+0x290>
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
 57c:	34 2f       	mov	r19, r20
 57e:	41 32       	cpi	r20, 0x21	; 33
 580:	08 f0       	brcs	.+2      	; 0x584 <__vector_11+0x104>
 582:	30 e2       	ldi	r19, 0x20	; 32
 584:	23 2f       	mov	r18, r19
 586:	cb 01       	movw	r24, r22
 588:	06 c0       	rjmp	.+12     	; 0x596 <__vector_11+0x116>
				for (i = n; i; i--) {
 58a:	fc 01       	movw	r30, r24
					UEDATX = pgm_read_byte(desc_addr++);
 58c:	01 96       	adiw	r24, 0x01	; 1
 58e:	e4 91       	lpm	r30, Z+
 590:	e0 93 f1 00 	sts	0x00F1, r30
					i = UEINTX;
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
 594:	21 50       	subi	r18, 0x01	; 1
 596:	22 23       	and	r18, r18
 598:	c1 f7       	brne	.-16     	; 0x58a <__vector_11+0x10a>
 59a:	63 0f       	add	r22, r19
 59c:	71 1d       	adc	r23, r1
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
 59e:	43 1b       	sub	r20, r19
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 5a0:	50 93 e8 00 	sts	0x00E8, r21
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
 5a4:	44 23       	and	r20, r20
 5a6:	f9 f6       	brne	.-66     	; 0x566 <__vector_11+0xe6>
 5a8:	30 32       	cpi	r19, 0x20	; 32
 5aa:	e9 f2       	breq	.-70     	; 0x566 <__vector_11+0xe6>
 5ac:	b1 c0       	rjmp	.+354    	; 0x710 <__vector_11+0x290>
			return;
                }
		if (bRequest == SET_ADDRESS) {
 5ae:	35 30       	cpi	r19, 0x05	; 5
 5b0:	61 f4       	brne	.+24     	; 0x5ca <__vector_11+0x14a>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 5b2:	8e ef       	ldi	r24, 0xFE	; 254
 5b4:	80 93 e8 00 	sts	0x00E8, r24


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 5b8:	80 91 e8 00 	lds	r24, 0x00E8
 5bc:	80 ff       	sbrs	r24, 0
 5be:	fc cf       	rjmp	.-8      	; 0x5b8 <__vector_11+0x138>
			return;
                }
		if (bRequest == SET_ADDRESS) {
			usb_send_in();
			usb_wait_in_ready();
			UDADDR = wValue | (1<<ADDEN);
 5c0:	8a 2f       	mov	r24, r26
 5c2:	80 68       	ori	r24, 0x80	; 128
 5c4:	80 93 e3 00 	sts	0x00E3, r24
 5c8:	a3 c0       	rjmp	.+326    	; 0x710 <__vector_11+0x290>
			return;
		}
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
 5ca:	39 30       	cpi	r19, 0x09	; 9
 5cc:	31 f5       	brne	.+76     	; 0x61a <__vector_11+0x19a>
 5ce:	44 23       	and	r20, r20
 5d0:	09 f0       	breq	.+2      	; 0x5d4 <__vector_11+0x154>
 5d2:	9b c0       	rjmp	.+310    	; 0x70a <__vector_11+0x28a>
			usb_configuration = wValue;
 5d4:	a0 93 00 01 	sts	0x0100, r26
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 5d8:	8e ef       	ldi	r24, 0xFE	; 254
 5da:	80 93 e8 00 	sts	0x00E8, r24
 5de:	8a e5       	ldi	r24, 0x5A	; 90
 5e0:	91 e0       	ldi	r25, 0x01	; 1
 5e2:	21 e0       	ldi	r18, 0x01	; 1
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
			usb_configuration = wValue;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
				UENUM = i;
 5e4:	20 93 e9 00 	sts	0x00E9, r18
				en = pgm_read_byte(cfg++);
 5e8:	fc 01       	movw	r30, r24
 5ea:	01 96       	adiw	r24, 0x01	; 1
 5ec:	e4 91       	lpm	r30, Z+
				UECONX = en;
 5ee:	e0 93 eb 00 	sts	0x00EB, r30
				if (en) {
 5f2:	ee 23       	and	r30, r30
 5f4:	69 f0       	breq	.+26     	; 0x610 <__vector_11+0x190>
					UECFG0X = pgm_read_byte(cfg++);
 5f6:	ac 01       	movw	r20, r24
 5f8:	4f 5f       	subi	r20, 0xFF	; 255
 5fa:	5f 4f       	sbci	r21, 0xFF	; 255
 5fc:	fc 01       	movw	r30, r24
 5fe:	84 91       	lpm	r24, Z+
 600:	80 93 ec 00 	sts	0x00EC, r24
					UECFG1X = pgm_read_byte(cfg++);
 604:	ca 01       	movw	r24, r20
 606:	01 96       	adiw	r24, 0x01	; 1
 608:	fa 01       	movw	r30, r20
 60a:	34 91       	lpm	r19, Z+
 60c:	30 93 ed 00 	sts	0x00ED, r19
		}
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
			usb_configuration = wValue;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
 610:	2f 5f       	subi	r18, 0xFF	; 255
 612:	25 30       	cpi	r18, 0x05	; 5
 614:	39 f7       	brne	.-50     	; 0x5e4 <__vector_11+0x164>
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
					UECFG1X = pgm_read_byte(cfg++);
				}
			}
        		UERST = 0x1E;
 616:	8e e1       	ldi	r24, 0x1E	; 30
 618:	4d c0       	rjmp	.+154    	; 0x6b4 <__vector_11+0x234>
        		UERST = 0;
			return;
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
 61a:	38 30       	cpi	r19, 0x08	; 8
 61c:	61 f4       	brne	.+24     	; 0x636 <__vector_11+0x1b6>
 61e:	40 38       	cpi	r20, 0x80	; 128
 620:	09 f0       	breq	.+2      	; 0x624 <__vector_11+0x1a4>
 622:	73 c0       	rjmp	.+230    	; 0x70a <__vector_11+0x28a>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 624:	80 91 e8 00 	lds	r24, 0x00E8
 628:	80 ff       	sbrs	r24, 0
 62a:	fc cf       	rjmp	.-8      	; 0x624 <__vector_11+0x1a4>
        		UERST = 0;
			return;
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
			usb_wait_in_ready();
			UEDATX = usb_configuration;
 62c:	80 91 00 01 	lds	r24, 0x0100
 630:	80 93 f1 00 	sts	0x00F1, r24
 634:	1b c0       	rjmp	.+54     	; 0x66c <__vector_11+0x1ec>
			usb_send_in();
			return;
		}

		if (bRequest == GET_STATUS) {
 636:	33 23       	and	r19, r19
 638:	e9 f4       	brne	.+58     	; 0x674 <__vector_11+0x1f4>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 63a:	80 91 e8 00 	lds	r24, 0x00E8
 63e:	80 ff       	sbrs	r24, 0
 640:	fc cf       	rjmp	.-8      	; 0x63a <__vector_11+0x1ba>

		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
			#ifdef SUPPORT_ENDPOINT_HALT
			if (bmRequestType == 0x82) {
 642:	42 38       	cpi	r20, 0x82	; 130
 644:	11 f0       	breq	.+4      	; 0x64a <__vector_11+0x1ca>
 646:	80 e0       	ldi	r24, 0x00	; 0
 648:	0d c0       	rjmp	.+26     	; 0x664 <__vector_11+0x1e4>
				UENUM = wIndex;
 64a:	60 93 e9 00 	sts	0x00E9, r22
				if (UECONX & (1<<STALLRQ)) i = 1;
 64e:	80 91 eb 00 	lds	r24, 0x00EB
 652:	90 e0       	ldi	r25, 0x00	; 0
 654:	25 e0       	ldi	r18, 0x05	; 5
 656:	96 95       	lsr	r25
 658:	87 95       	ror	r24
 65a:	2a 95       	dec	r18
 65c:	e1 f7       	brne	.-8      	; 0x656 <__vector_11+0x1d6>
 65e:	81 70       	andi	r24, 0x01	; 1
				UENUM = 0;
 660:	10 92 e9 00 	sts	0x00E9, r1
			}
			#endif
			UEDATX = i;
 664:	80 93 f1 00 	sts	0x00F1, r24
			UEDATX = 0;
 668:	10 92 f1 00 	sts	0x00F1, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 66c:	8e ef       	ldi	r24, 0xFE	; 254
 66e:	80 93 e8 00 	sts	0x00E8, r24
 672:	4e c0       	rjmp	.+156    	; 0x710 <__vector_11+0x290>
			UEDATX = 0;
			usb_send_in();
			return;
		}
		#ifdef SUPPORT_ENDPOINT_HALT
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
 674:	31 30       	cpi	r19, 0x01	; 1
 676:	19 f0       	breq	.+6      	; 0x67e <__vector_11+0x1fe>
 678:	33 30       	cpi	r19, 0x03	; 3
 67a:	09 f0       	breq	.+2      	; 0x67e <__vector_11+0x1fe>
 67c:	46 c0       	rjmp	.+140    	; 0x70a <__vector_11+0x28a>
 67e:	42 30       	cpi	r20, 0x02	; 2
 680:	f1 f4       	brne	.+60     	; 0x6be <__vector_11+0x23e>
 682:	ab 2b       	or	r26, r27
 684:	e1 f4       	brne	.+56     	; 0x6be <__vector_11+0x23e>
		  && bmRequestType == 0x02 && wValue == 0) {
			i = wIndex & 0x7F;
 686:	26 2f       	mov	r18, r22
 688:	2f 77       	andi	r18, 0x7F	; 127
			if (i >= 1 && i <= MAX_ENDPOINT) {
 68a:	82 2f       	mov	r24, r18
 68c:	81 50       	subi	r24, 0x01	; 1
 68e:	84 30       	cpi	r24, 0x04	; 4
 690:	b0 f4       	brcc	.+44     	; 0x6be <__vector_11+0x23e>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 692:	8e ef       	ldi	r24, 0xFE	; 254
 694:	80 93 e8 00 	sts	0x00E8, r24
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
		  && bmRequestType == 0x02 && wValue == 0) {
			i = wIndex & 0x7F;
			if (i >= 1 && i <= MAX_ENDPOINT) {
				usb_send_in();
				UENUM = i;
 698:	20 93 e9 00 	sts	0x00E9, r18
				if (bRequest == SET_FEATURE) {
 69c:	33 30       	cpi	r19, 0x03	; 3
 69e:	a9 f1       	breq	.+106    	; 0x70a <__vector_11+0x28a>
					UECONX = (1<<STALLRQ)|(1<<EPEN);
				} else {
					UECONX = (1<<STALLRQC)|(1<<RSTDT)|(1<<EPEN);
 6a0:	89 e1       	ldi	r24, 0x19	; 25
 6a2:	80 93 eb 00 	sts	0x00EB, r24
					UERST = (1 << i);
 6a6:	81 e0       	ldi	r24, 0x01	; 1
 6a8:	90 e0       	ldi	r25, 0x00	; 0
 6aa:	02 c0       	rjmp	.+4      	; 0x6b0 <__vector_11+0x230>
 6ac:	88 0f       	add	r24, r24
 6ae:	99 1f       	adc	r25, r25
 6b0:	2a 95       	dec	r18
 6b2:	e2 f7       	brpl	.-8      	; 0x6ac <__vector_11+0x22c>
 6b4:	80 93 ea 00 	sts	0x00EA, r24
					UERST = 0;
 6b8:	10 92 ea 00 	sts	0x00EA, r1
 6bc:	29 c0       	rjmp	.+82     	; 0x710 <__vector_11+0x290>
				}
				return;
			}
		}
		#endif
		if (bRequest == HID_GET_REPORT && bmRequestType == 0xA1) {
 6be:	31 30       	cpi	r19, 0x01	; 1
 6c0:	21 f5       	brne	.+72     	; 0x70a <__vector_11+0x28a>
 6c2:	41 3a       	cpi	r20, 0xA1	; 161
 6c4:	11 f5       	brne	.+68     	; 0x70a <__vector_11+0x28a>
			if (wIndex == 0) {
 6c6:	67 2b       	or	r22, r23
 6c8:	01 f5       	brne	.+64     	; 0x70a <__vector_11+0x28a>
				len = wLength;
 6ca:	4c 2f       	mov	r20, r28
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 6cc:	5e ef       	ldi	r21, 0xFE	; 254
			if (wIndex == 0) {
				len = wLength;
				do {
					// wait for host ready for IN packet
					do {
						i = UEINTX;
 6ce:	80 91 e8 00 	lds	r24, 0x00E8
					} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
 6d2:	28 2f       	mov	r18, r24
 6d4:	30 e0       	ldi	r19, 0x00	; 0
 6d6:	c9 01       	movw	r24, r18
 6d8:	85 70       	andi	r24, 0x05	; 5
 6da:	90 70       	andi	r25, 0x00	; 0
 6dc:	89 2b       	or	r24, r25
 6de:	b9 f3       	breq	.-18     	; 0x6ce <__vector_11+0x24e>
					if (i & (1<<RXOUTI)) return;	// abort
 6e0:	22 fd       	sbrc	r18, 2
 6e2:	16 c0       	rjmp	.+44     	; 0x710 <__vector_11+0x290>
					// send IN packet
					n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
 6e4:	94 2f       	mov	r25, r20
 6e6:	41 32       	cpi	r20, 0x21	; 33
 6e8:	08 f0       	brcs	.+2      	; 0x6ec <__vector_11+0x26c>
 6ea:	90 e2       	ldi	r25, 0x20	; 32
 6ec:	89 2f       	mov	r24, r25
 6ee:	03 c0       	rjmp	.+6      	; 0x6f6 <__vector_11+0x276>
					for (i = n; i; i--) {
						UEDATX = 0;
 6f0:	10 92 f1 00 	sts	0x00F1, r1
						i = UEINTX;
					} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
					if (i & (1<<RXOUTI)) return;	// abort
					// send IN packet
					n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
					for (i = n; i; i--) {
 6f4:	81 50       	subi	r24, 0x01	; 1
 6f6:	88 23       	and	r24, r24
 6f8:	d9 f7       	brne	.-10     	; 0x6f0 <__vector_11+0x270>
						UEDATX = 0;
					}
					len -= n;
 6fa:	49 1b       	sub	r20, r25
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 6fc:	50 93 e8 00 	sts	0x00E8, r21
					for (i = n; i; i--) {
						UEDATX = 0;
					}
					len -= n;
					usb_send_in();
				} while (len || n == ENDPOINT0_SIZE);
 700:	44 23       	and	r20, r20
 702:	29 f7       	brne	.-54     	; 0x6ce <__vector_11+0x24e>
 704:	90 32       	cpi	r25, 0x20	; 32
 706:	19 f3       	breq	.-58     	; 0x6ce <__vector_11+0x24e>
 708:	03 c0       	rjmp	.+6      	; 0x710 <__vector_11+0x290>
				return;
			}
		}
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
 70a:	81 e2       	ldi	r24, 0x21	; 33
 70c:	80 93 eb 00 	sts	0x00EB, r24
}
 710:	ff 91       	pop	r31
 712:	ef 91       	pop	r30
 714:	df 91       	pop	r29
 716:	cf 91       	pop	r28
 718:	bf 91       	pop	r27
 71a:	af 91       	pop	r26
 71c:	9f 91       	pop	r25
 71e:	8f 91       	pop	r24
 720:	7f 91       	pop	r23
 722:	6f 91       	pop	r22
 724:	5f 91       	pop	r21
 726:	4f 91       	pop	r20
 728:	3f 91       	pop	r19
 72a:	2f 91       	pop	r18
 72c:	0f 90       	pop	r0
 72e:	0f be       	out	0x3f, r0	; 63
 730:	0f 90       	pop	r0
 732:	1f 90       	pop	r1
 734:	18 95       	reti

00000736 <print_P>:
#include <avr/pgmspace.h>

#include "print.h"

void print_P(const char *s)
{
 736:	1f 93       	push	r17
 738:	cf 93       	push	r28
 73a:	df 93       	push	r29
 73c:	ec 01       	movw	r28, r24
 73e:	fe 01       	movw	r30, r28
	char c;

	while (1) {
		c = pgm_read_byte(s++);
 740:	21 96       	adiw	r28, 0x01	; 1
 742:	14 91       	lpm	r17, Z+
		if (!c) break;
 744:	11 23       	and	r17, r17
 746:	39 f0       	breq	.+14     	; 0x756 <print_P+0x20>
		if (c == '\n') usb_debug_putchar('\r');
 748:	1a 30       	cpi	r17, 0x0A	; 10
 74a:	11 f4       	brne	.+4      	; 0x750 <print_P+0x1a>
 74c:	8d e0       	ldi	r24, 0x0D	; 13
 74e:	12 de       	rcall	.-988    	; 0x374 <usb_debug_putchar>
		usb_debug_putchar(c);
 750:	81 2f       	mov	r24, r17
 752:	10 de       	rcall	.-992    	; 0x374 <usb_debug_putchar>
 754:	f4 cf       	rjmp	.-24     	; 0x73e <print_P+0x8>
	}
}
 756:	df 91       	pop	r29
 758:	cf 91       	pop	r28
 75a:	1f 91       	pop	r17
 75c:	08 95       	ret

0000075e <_exit>:
 75e:	f8 94       	cli

00000760 <__stop_program>:
 760:	ff cf       	rjmp	.-2      	; 0x760 <__stop_program>
